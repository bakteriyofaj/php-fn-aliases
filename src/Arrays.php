<?php

namespace BakteriyoFaj\PhpFnAliases;

class Arrays extends PhpMethodCaller
{
    const ChangeKeyCase     = "array_change_key_case";       // Changes the case of all keys in an array
    const Chunk             = "array_chunk";                 // Split an array into chunks
    const Column            = "array_column";                // Return the values from a single column in the input array
    const Combine           = "array_combine";               // Creates an array by using one array for keys and another for its values
    const CountValues       = "array_count_values";          // Counts all the values of an array
    const DiffAssoc         = "array_diff_assoc";            // Computes the difference of arrays with additional index check
    const DiffKey           = "array_diff_key";              // Computes the difference of arrays using keys for comparison
    const DiffUassoc        = "array_diff_uassoc";           // Computes the difference of arrays with additional index check which is performed by a user supplied callback function
    const DiffUkey          = "array_diff_ukey";             // Computes the difference of arrays using a callback function on the keys for comparison
    const Diff              = "array_diff";                  // Computes the difference of arrays
    const FillKeys          = "array_fill_keys";             // Fill an array with values, specifying keys
    const Fill              = "array_fill";                  // Fill an array with values
    const Filter            = "array_filter";                // Filters elements of an array using a callback function
    const Flip              = "array_flip";                  // Exchanges all keys with their associated values in an array
    const IntersectAssoc    = "array_intersect_assoc";       // Computes the intersection of arrays with additional index check
    const IntersectKey      = "array_intersect_key";         // Computes the intersection of arrays using keys for comparison
    const IntersectUassoc   = "array_intersect_uassoc";      // Computes the intersection of arrays with additional index check, compares indexes by a callback function
    const IntersectUkey     = "array_intersect_ukey";        // Computes the intersection of arrays using a callback function on the keys for comparison
    const Intersect         = "array_intersect";             // Computes the intersection of arrays
    const KeyExists         = "array_key_exists";            // Checks if the given key or index exists in the array
    const KeyFirst          = "array_key_first";             // Gets the first key of an array
    const KeyLast           = "array_key_last";              // Gets the last key of an array
    const Keys              = "array_keys";                  // Return all the keys or a subset of the keys of an array
    const Map               = "array_map";                   // Applies the callback to the elements of the given arrays
    const MergeRecursive    = "array_merge_recursive";       // Merge one or more arrays recursively
    const Merge             = "array_merge";                 // Merge one or more arrays
    const Multisort         = "array_multisort";             // Sort multiple or multi-dimensional arrays
    const Pad               = "array_pad";                   // Pad array to the specified length with a value
    const Pop               = "array_pop";                   // Pop the element off the end of array
    const Product           = "array_product";               // Calculate the product of values in an array
    const Push              = "array_push";                  // Push one or more elements onto the end of array
    const Rand              = "array_rand";                  // Pick one or more random keys out of an array
    const Reduce            = "array_reduce";                // Iteratively reduce the array to a single value using a callback function
    const ReplaceRecursive  = "array_replace_recursive";     // Replaces elements from passed arrays into the first array recursively
    const Replace           = "array_replace";               // Replaces elements from passed arrays into the first array
    const Reverse           = "array_reverse";               // Return an array with elements in reverse order
    const Search            = "array_search";                // Searches the array for a given value and returns the first corresponding key if successful
    const Shift             = "array_shift";                 // Shift an element off the beginning of array
    const Slice             = "array_slice";                 // Extract a slice of the array
    const Splice            = "array_splice";                // Remove a portion of the array and replace it with something else
    const Sum               = "array_sum";                   // Calculate the sum of values in an array
    const UdiffAssoc        = "array_udiff_assoc";           // Computes the difference of arrays with additional index check, compares data by a callback function
    const UdiffUassoc       = "array_udiff_uassoc";          // Computes the difference of arrays with additional index check, compares data and indexes by a callback function
    const Udiff             = "array_udiff";                 // Computes the difference of arrays by using a callback function for data comparison
    const UintersectAssoc   = "array_uintersect_assoc";      // Computes the intersection of arrays with additional index check, compares data by a callback function
    const UintersectUassoc  = "array_uintersect_uassoc";     // Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions
    const Uintersect        = "array_uintersect";            // Computes the intersection of arrays, compares data by a callback function
    const Unique            = "array_unique";                // Removes duplicate values from an array
    const Unshift           = "array_unshift";               // Prepend one or more elements to the beginning of an array
    const Values            = "array_values";                // Return all the values of an array
    const WalkRecursive     = "array_walk_recursive";        // Apply a user function recursively to every member of an array
    const Walk              = "array_walk";                  // Apply a user supplied function to every member of an array
    const Arsort            = "arsort";                      // Sort an array in reverse order and maintain index association
    const Asort             = "asort";                       // Sort an array and maintain index association
    const Compact           = "compact";                     // Create array containing variables and their values
    const Count             = "count";                       // Count all elements in an array, or something in an object
    const Current           = "current";                     // Return the current element in an array
    const Each              = "each";                        // Return the current key and value pair from an array and advance the array cursor
    const End               = "end";                         // Set the internal pointer of an array to its last element
    const Extract           = "extract";                     // Import variables into the current symbol table from an array
    const InArray           = "in_array";                    // Checks if a value exists in an array
    const Key               = "key";                         // Fetch a key from an array
    const Krsort            = "krsort";                      // Sort an array by key in reverse order
    const Ksort             = "ksort";                       // Sort an array by key
    const NatcaseSort       = "natcasesort";                 // Sort an array using a case insensitive "natural order" algorithm
    const Natsort           = "natsort";                     // Sort an array using a "natural order" algorithm
    const Next              = "next";                        // Advance the internal pointer of an array
    const Pos               = "pos";                         // Alias of current
    const Prev              = "prev";                        // Rewind the internal array pointer
    const Range             = "range";                       // Create an array containing a range of elements
    const Reset             = "reset";                       // Set the internal pointer of an array to its first element
    const Rsort             = "rsort";                       // Sort an array in reverse order
    const Shuffle           = "shuffle";                     // Shuffle an array
    const Sizeof            = "sizeof";                      // Alias of count
    const Sort              = "sort";                        // Sort an array
    const Uasort            = "uasort";                      // Sort an array with a user-defined comparison function and maintain index association
    const Uksort            = "uksort";                      // Sort an array by keys using a user-defined comparison function
    const Usort             = "usort";                       // Sort an array by values using a user-defined comparison function
}